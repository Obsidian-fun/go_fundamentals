
// Semaphore pattern

func compute(ch chan int) {
	ch <- someComputation() // on completion, signal on the chanel
} 

func main() {

	ch := make(chan int);
	go compute(ch);
	doSomethingElseForAWhile();	
	result := <-ch;

}


// Here is an alternative pattern,

func main(){

	ch := make(chan int);
	
	go func() {
	// Do something
		ch <- 1;  // Sending a signal
	
	}()
	
	doSomethingElseForAWhile();
	
	result := <-ch;
	
}

// Here is an example, where we wait for 2 sort-goroutines which sort a part of a slice,

func main() {

	done := make(chan bool);

	// doSort is a lambda function, so a closure which knows when the channel is done,

	doSort := func(s []int) {
		sort(s);
		done <- true;		
	}();

	i := pivot(s);
	go doSort(s [:i]);
	go doSort(s [i:]);

	<-done;
	<-done;
}


